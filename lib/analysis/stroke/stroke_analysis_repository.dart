import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:swim_analyzer/analysis/stroke/stroke_analysis.dart';

/// A repository to handle CRUD operations specifically for StrokeAnalysis.
class StrokeAnalysisRepository {
  final FirebaseFirestore _firestore;
  static const String _collectionPath = 'strokeAnalyzes';

  StrokeAnalysisRepository({FirebaseFirestore? firestore})
      : _firestore = firestore ?? FirebaseFirestore.instance;

  /// A reference to the 'analyzes' collection with a Firestore converter.
  /// This allows us to work directly with strongly-typed StrokeAnalysis objects.
  CollectionReference<StrokeAnalysis> get _strokeAnalyzesRef =>
      _firestore.collection(_collectionPath).withConverter<StrokeAnalysis>(
            fromFirestore: (snapshot, _) =>
                StrokeAnalysis.fromJson(snapshot.data()!),
            toFirestore: (analysis, _) => analysis.toJson(),
          );

  /// Adds a new stroke analysis document to Firestore.
  /// The document ID will be automatically generated by Firestore.
  Future<void> addAnalysis(StrokeAnalysis analysis) async {
    try {
      final docRef = _strokeAnalyzesRef.doc();
      analysis.id = docRef.id; // Assign the generated ID before saving
      await docRef.set(analysis);
    } catch (e) {
      print("Error adding stroke analysis: $e");
      rethrow;
    }
  }

  /// Retrieves a stream of all stroke analyses for a specific swimmer,
  /// ordered by creation date.
  Stream<List<StrokeAnalysis>> getAnalysesForSwimmer(String swimmerId) {
    return _strokeAnalyzesRef
        .where('userId', isEqualTo: swimmerId)
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs.map((doc) => doc.data()).toList());
  }

  /// Deletes a specific analysis document from Firestore.
  Future<void> deleteAnalysis(String analysisId) async {
    try {
      // Note: We use the base collection reference for deletion
      // as withConverter doesn't apply to delete operations directly.
      await _firestore.collection(_collectionPath).doc(analysisId).delete();
    } catch (e) {
      print("Error deleting stroke analysis: $e");
      rethrow;
    }
  }

  /// Updates an existing stroke analysis document in Firestore.
  Future<void> updateAnalysis(StrokeAnalysis analysis) async {
    try {
      await _strokeAnalyzesRef.doc(analysis.id).set(analysis, SetOptions(merge: true));
    } catch (e) {
      print("Error updating stroke analysis: $e");
      rethrow;
    }
  }
}
